<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.roommake.user.mapper.UserMapper">

    <resultMap type="com.roommake.user.vo.User" id="UserResultMap">
        <id column="user_id" property="id"/>
        <result column="user_email" property="email"/>
        <result column="user_password" property="password"/>
        <result column="user_nickname" property="nickname"/>
        <result column="user_profile_photo" property="profilePhoto"/>
        <result column="user_tel" property="tel"/>
        <result column="user_birth_date" property="birthDate"/>
        <result column="user_introduction" property="introduction"/>
        <result column="user_sns" property="sns"/>
        <result column="user_create_date" property="createDate"/>
        <result column="user_update_date" property="updateDate"/>
        <result column="user_delete_date" property="deleteDate"/>
        <result column="user_unique_recommend_code" property="uniqueRecommendCode"/>
        <result column="user_social_yn" property="socialYn"/>
        <result column="user_status" property="status"/>
        <result column="user_point" property="point"/>
        <result column="user_address" property="address"/>
        <result column="user_complaint_count" property="complaintCount"/>
        <result column="following_count" property="followingCount"/>
        <result column="follower_count" property="followerCount"/>
        <result column="user_option_recommend_code" property="optionRecommendCode"/>
        <association property="gradeId" javaType="com.roommake.user.vo.UserGrade">
            <id column="user_grade_id" property="id"/>
            <id column="user_grade_name" property="name"/>
        </association>
    </resultMap>

    <!-- 모든 유저 조회 -->
    <select id="getAllUsers" resultMap="UserResultMap">
        SELECT *
        FROM user
    </select>


    <!-- 이메일로 유저 조회 -->
    <select id="getUserByEmail" resultMap="UserResultMap">
        SELECT *
        FROM user
        WHERE user_email = #{email}
    </select>

    <!-- 이메일로 사용자 및 권한 조회 -->
    <select id="getUserByEmailWithRoles" resultType="map">
        SELECT u.user_id, u.user_email, u.user_password, u.user_nickname, GROUP_CONCAT(ur.user_role_name) AS roles
        FROM user u
                 JOIN user_role ur ON u.user_id = ur.user_id
        WHERE u.user_email = #{email}
        GROUP BY u.user_id, u.user_email, u.user_password, u.user_nickname
    </select>

    <!-- 아이디으로 유저 조회 -->
    <select id="getUserById" resultMap="UserResultMap">
        SELECT *
        FROM user
        WHERE user_id = #{id}
    </select>

    <!-- 닉네임으로 유저 조회 -->
    <select id="getUserByNickname" resultMap="UserResultMap">
        SELECT *
        FROM user
        WHERE user_nickname = #{nickname}
    </select>

    <!-- 추천인 코드 중복 체크 -->
    <select id="existRecommendCode" parameterType="String" resultType="boolean">
        SELECT EXISTS(SELECT 1
                      FROM user
                      WHERE user_unique_recommend_code = #{uniqueRecommendCode})
    </select>

    <!-- 유저 등록 -->
    <insert id="createUser" parameterType="com.roommake.user.vo.User">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID() AS no
        </selectKey>
        INSERT INTO user (user_email, user_password, user_nickname, user_unique_recommend_code, user_option_recommend_code)
        VALUES (#{email}, #{password}, #{nickname}, #{uniqueRecommendCode}, #{optionRecommendCode})
    </insert>

    <resultMap id="termResultMap" type="com.roommake.user.vo.Term">
        <id column="term_id" property="id"/>
        <result column="term_title" property="title"/>
        <result column="term_content" property="content"/>
        <result column="term_create_date" property="createDate"/>
        <result column="term_update_date" property="updateDate"/>
        <result column="term_delete_date" property="deleteDate"/>
        <result column="term_delete_yn" property="deleteYn"/>
        <result column="term_require_yn" property="requireYn"/>
    </resultMap>

    <!-- 모든 약관 불러오기 -->
    <select id="getAllTerms" resultMap="termResultMap">
        SELECT term_id, term_title, term_content, term_create_date, term_update_date, term_delete_date, term_delete_yn, term_require_yn
        FROM term
        WHERE term_delete_yn = 'N'
    </select>

    <!-- 사용자 약관 동의 저장 -->
    <insert id="createTermAgreement" parameterType="com.roommake.user.vo.TermAgreement">
        INSERT INTO
            term_agreement(agree1, agree2, agree3, user_id, term_id, term_agreement_create_date, term_agreement_update_date)
        VALUES
            (#{agree1}, #{agree2}, #{agree3}, #{user.id}, #{term.id}, NOW(), NOW())
    </insert>

    <!-- 약관 ID로 약관 정보를 조회 -->
    <select id="getTermById" parameterType="int" resultMap="termResultMap">
        SELECT term_id, term_title, term_content, term_create_date, term_update_date, term_delete_date, term_delete_yn, term_require_yn
        FROM term
        WHERE term_id = #{id}
    </select>

    <!-- 추천인 코드로 유저 검색 -->
    <select id="getByRecommendCode" parameterType="String" resultMap="UserResultMap">
        SELECT *
        FROM user
        WHERE user_unique_recommend_code = #{recommendCode}
    </select>

    <!-- 신규 가입자에게 포인트 적립 -->
    <insert id="addPlusPointForNewUser" parameterType="com.roommake.user.vo.PlusPointHistory">
        INSERT INTO
            plus_point_history (plus_point_amount, plus_point_create_date, plus_point_expire_date, user_id, point_balance, point_type_id)
        VALUES
            (#{amount}, NOW(), #{expireDate}, #{user.id}, #{balance}, #{pointType.id})
    </insert>

    <!-- 기존 회원에게 포인트 적립 -->
    <insert id="addPlusPointForExistUser" parameterType="com.roommake.user.vo.PlusPointHistory">
        INSERT INTO
            plus_point_history (plus_point_amount, plus_point_create_date, plus_point_expire_date, user_id, point_balance, point_type_id)
        VALUES
            (#{amount}, NOW(), #{expireDate}, #{user.id}, #{balance}, #{pointType.id})
    </insert>

    <!-- 기존 회원의 포인트 잔액 업데이트 -->
    <update id="modifyUserPoint">
        UPDATE user
        SET user_point = user_point + #{point}
        WHERE user_id = #{id}
    </update>

    <!-- 신규 회원 포인트 잔액 업데이트 -->
    <update id="modifyNewUserPoint">
        UPDATE user
        SET user_point = #{point}
        WHERE user_id = #{id}
    </update>

    <!-- 이메일 중복 체크 -->
    <select id="ExistEmail" parameterType="String" resultType="boolean">
        SELECT EXISTS(SELECT 1 FROM user WHERE user_email = #{email})
    </select>

    <!-- 유저 회원정보 수정-->
    <update id="modifyUser" parameterType="com.roommake.user.vo.User">
        update
            user
        set
            user_profile_photo = #{profilePhoto},
            user_nickname = #{nickname},
            user_email = #{email},
            user_birth_date = #{birthDate},
            user_introduction = #{introduction},
            user_sns = #{sns},
            user_status = #{status},
            user_point = #{point}
        WHERE user_email = #{email}
    </update>

    <!-- 페이징 정렬 검색 등 조건 들어간 유저 목록 조회 -->
    <select id="getUsers" parameterType="com.roommake.dto.Criteria" resultMap="UserResultMap">
        select
            *
        from
        (select
            u.user_id,
            u.user_email,
            u.user_nickname,
            u.user_grade_id,
            g.user_grade_name,
            u.user_status,
            u.user_point,
            u.user_create_date,
            u.user_update_date,
            @rownum := @rownum + 1 as row_num
        from
            (select @rownum := 0) r,
            user u
            left join user_grade g on u.user_grade_id = g.user_grade_id
        <where>
            <if test="'email' == opt">
                and u.user_email like CONCAT('%', #{keyword}, '%')
            </if>
            <if test="'nickname' == opt">
                and u.user_nickname like CONCAT('%', #{keyword}, '%')
            </if>
            <choose>
                <when test='filt == "active"'>
                    and u.user_status = 'active'
                </when>
                <when test='filt == "block"'>
                    and u.user_status = 'block'
                </when>
                <when test='filt == "delete"'>
                    and u.user_status = 'delete'
                </when>
            </choose>
                and (u.user_status in('active', 'block', 'delete'))
        </where>
        order by
        <choose>
            <when test="sort == 'date'">
                u.user_id desc
            </when>
            <when test="sort == 'nickname'">
                u.user_nickname asc
            </when>
            <when test="sort == 'grade'">
                u.user_grade_id desc
            </when>
        </choose>
        ) as user
        where
            row_num between #{begin} and #{end}
    </select>

    <!-- 조건에 맞는 유저 전체 수 조회 -->
    <select id="getTotalRows" parameterType="com.roommake.dto.Criteria" resultType="int">
        select count(*)
        from
            user
        <where>
            <if test="'email' == opt">
                and user_email like CONCAT('%', #{keyword}, '%')
            </if>
            <if test="'nickname' == opt">
                and u.user_nickname like CONCAT('%', #{keyword}, '%')
            </if>
            <if test='filt == "active"'>
                and user_status = 'active'
            </if>
            <if test='filt == "block"'>
                and user_status = 'block'
            </if>
            <if test='filt == "delete"'>
                and user_status = 'delete'
            </if>
                and (user_status in('active', 'block', 'delete'))
        </where>
    </select>

    <!-- 회원 신고 카운트 누적 -->
    <update id="modifyUserComplaintCount" parameterType="com.roommake.user.vo.User">
        update
            user
        set
            user_complaint_count = #{complaintCount}
        <if test="complaintCount >= 5">
            user_status = 'block'
        </if>
        where
            user_id = #{id}
    </update>

</mapper>
